[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring Income and Mortgage Patterns in New York",
    "section": "",
    "text": "Code\nif (!require(tidyverse)) install.packages(\"tidyverse\")\nif (!require(DT)) install.packages(\"DT\")\nif (!require(sf)) install.packages(\"sf\")\nif (!require(sf)) install.packages(\"rvest\")\nif (!require(sf)) install.packages(\"httr\")\nif (!require(sf)) install.packages(\"data.table\")\n\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(sf)\nlibrary(utils)\nlibrary(rvest)\nlibrary(httr)\nlibrary(data.table)"
  },
  {
    "objectID": "index.html#data-downloading",
    "href": "index.html#data-downloading",
    "title": "Exploring Income and Mortgage Patterns in New York",
    "section": "Data downloading",
    "text": "Data downloading\n\nNew York shapefile\n\nDownloading and opening New York shapefile\n\n\nCode\n# Define the URL of the ZIP file and the path for the local file\nzip_url &lt;- \"https://www.example.com/tl_2024_36_cd119.zip\" # Replace with actual URL\nzip_file &lt;- \"data/tl_2024_36_cd119.zip\"\nextract_dir &lt;- \"data/tl_2024_36_cd119\"\n\n# Check if the ZIP file already exists\nif (!file.exists(zip_file)) {\n  message(\"Downloading ZIP file...\")\n  download.file(zip_url, zip_file, mode = \"wb\")\n}\n\n# Check if the extracted folder exists; if not, unzip the file\nif (!dir.exists(extract_dir)) {\n  message(\"Unzipping the file...\")\n  unzip(zipfile = zip_file, exdir = extract_dir)\n} \n\n# Load the shapefile (adjust path as needed)\nshapefile_path &lt;- file.path(extract_dir, \"tl_2024_36_cd119.shp\")\nshapefile &lt;- st_read(shapefile_path, quiet = TRUE)\n\n# Plot the map\nplot(st_geometry(shapefile))\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Define file paths\nzip_file &lt;- \"data/nyc_borough_boundaries.zip\"\nunzip_dir &lt;- \"data/nyc_borough_boundaries\"\n\n# Download the NYC borough boundaries shapefile if not already downloaded\nif (!file.exists(zip_file)) {\n  download.file(\"https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile\", \n                destfile = zip_file, mode = \"wb\")\n}\n\n# Unzip the file\nunzip(zip_file, exdir = unzip_dir)\n\n# Find the .shp file in the unzipped directory\nshp_file &lt;- list.files(unzip_dir, pattern = \"\\\\.shp$\", full.names = TRUE)\n\n# Load the shapefile using sf\nnyc_sf &lt;- st_read(shp_file, quiet = TRUE)\n\n# Plot the shapefile using ggplot2\nggplot(nyc_sf) + \n  geom_sf(aes(fill = shape_area)) + \n  labs(title = \"NYC Borough Boundaries\", fill = \"Area\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nNYC Annualized Sales (2003-2023)\n\n\nCode\n# Create the target directory if it does not exist\ndir.create(\"data/NYC_Annualized_Sales\", recursive = TRUE, showWarnings = FALSE)\n\n# Define the base URL\nbase_url &lt;- \"https://www.nyc.gov/assets/finance/downloads/pdf/rolling_sales/neighborhood_sales/\"\n\n# Define the list of file names and relative paths (same strings used for both)\nfiles &lt;- c(\n  \"2023/2023_manhattan.xlsx\",\n  \"2023/2023_bronx.xlsx\",\n  \"2023/2023_brooklyn.xlsx\",\n  \"2023/2023_queens.xlsx\",\n  \"2023/2023_statenisland.xlsx\",\n  \"2023/2023_citywide_sale.xlsx\",\n  \"2022/2022_citywide_sale.xlsx\",\n  \"2021_citywide_sale.xlsx\",\n  \"2020_citywide_sale.xlsx\",\n  \"2019_citywide_sale.xlsx\",\n  \"2018_citywide_sale.xlsx\"\n)\n\n# Use purrr::walk for mapping\nwalk(files, ~ {\n  # Destination file name (extracts the last part of the file path)\n  dest_file &lt;- file.path(\"data/NYC_Annualized_Sales\", basename(.x))\n  \n  # Check if file exists\n  if (!file.exists(dest_file)) {\n    tryCatch({\n      # Concatenate base URL with the relative path\n      download.file(paste0(base_url, .x), destfile = dest_file, mode = \"wb\")\n      message(\"Downloaded: \", dest_file)\n    }, error = function(e) {\n      message(\"Failed to download: \", dest_file, \" - \", e$message)\n    })\n  } else {\n    message(\"File already exists: \", dest_file)\n  }\n})\n\n\n\n\nRecord Mortgages Originated NY (2016-2021)\n\n\nCode\n# URL of the webpage\nurl &lt;- \"https://www.dfs.ny.gov/apps_and_licensing/mortgage_companies/rrpm_originated_nys\"\n\n# Define the output file path\noutput_file &lt;- \"data/mortgage_table.csv\"\n\n# Check if the file already exists\nif (file.exists(output_file)) {\n  # Load the existing CSV file into table_df\n  table_df &lt;- read.csv(output_file)\n} else {\n  # Read the webpage content\n  webpage &lt;- read_html(url)\n  \n  # Extract the table (assumes the table is the first one on the page)\n  table &lt;- webpage %&gt;%\n    html_node(\"table\") %&gt;%  # Select the table element\n    html_table()\n  \n  # Convert to a data frame\n  table_df &lt;- as.data.frame(table)\n  \n  # Save the table as a CSV file\n  write.csv(table_df, output_file, row.names = FALSE)\n}\n\n# Use table_df for further processing or display\ntable_df\n\n\n  Total.Number Year\n1      258,117 2022\n2      448,702 2021\n3      363,635 2020\n4      294,103 2019\n5      230,093 2018\n6      274,388 2017\n7      223,744 2016\n\n\n\n\nHMDA US Mortgage Data (2018-2023)\n\n\nCode\n# Base URL\nbase_url &lt;- \"https://ffiec.cfpb.gov/v2/data-browser-api/view/csv\"\n\n# Define years\nyears &lt;- 2018:2023\n\n# Create the output folder\ndir.create(\"data/HMDA_NYC_Mortgage_2018_2023\", recursive = TRUE, showWarnings = FALSE)\n\n# Loop through years to download state-level data\nfor (year in years) {\n  # Construct the API URL with states only\n  api_url &lt;- paste0(base_url, \"?years=\", year, \"&states=36\")\n  \n  # Output file path\n  output_file &lt;- paste0(\"data/HMDA_NYC_Mortgage_2018_2023/mortgage_data_\", year, \"_state.csv\")\n  \n  # Check if the file already exists\n  if (!file.exists(output_file)) {\n    # If the file doesn't exist, download it\n    tryCatch({\n      response &lt;- GET(api_url)\n      \n      # Check if the request is successful\n      if (status_code(response) == 200) {\n        writeBin(content(response, \"raw\"), output_file)\n        message(\"Downloaded: \", output_file)\n      } else {\n        message(\"Failed for year \", year, \" - Status Code: \", status_code(response))\n        message(content(response, as = \"text\"))\n      }\n    }, error = function(e) {\n      message(\"Error downloading year \", year, \" - \", e$message)\n    })\n  }\n}\n\n\n\n\nCode\n# Define the file path\nfile_path &lt;- \"data/HMDA_NYC_Mortgage_2018_2023/mortgage_data_2018_state.csv\"\n\n# Read the CSV file\nmortgage_data &lt;- fread(file_path)\n\n# Get a summary of the data\ncolnames(mortgage_data)\n\n\n [1] \"activity_year\"                           \n [2] \"lei\"                                     \n [3] \"derived_msa-md\"                          \n [4] \"state_code\"                              \n [5] \"county_code\"                             \n [6] \"census_tract\"                            \n [7] \"conforming_loan_limit\"                   \n [8] \"derived_loan_product_type\"               \n [9] \"derived_dwelling_category\"               \n[10] \"derived_ethnicity\"                       \n[11] \"derived_race\"                            \n[12] \"derived_sex\"                             \n[13] \"action_taken\"                            \n[14] \"purchaser_type\"                          \n[15] \"preapproval\"                             \n[16] \"loan_type\"                               \n[17] \"loan_purpose\"                            \n[18] \"lien_status\"                             \n[19] \"reverse_mortgage\"                        \n[20] \"open-end_line_of_credit\"                 \n[21] \"business_or_commercial_purpose\"          \n[22] \"loan_amount\"                             \n[23] \"loan_to_value_ratio\"                     \n[24] \"interest_rate\"                           \n[25] \"rate_spread\"                             \n[26] \"hoepa_status\"                            \n[27] \"total_loan_costs\"                        \n[28] \"total_points_and_fees\"                   \n[29] \"origination_charges\"                     \n[30] \"discount_points\"                         \n[31] \"lender_credits\"                          \n[32] \"loan_term\"                               \n[33] \"prepayment_penalty_term\"                 \n[34] \"intro_rate_period\"                       \n[35] \"negative_amortization\"                   \n[36] \"interest_only_payment\"                   \n[37] \"balloon_payment\"                         \n[38] \"other_nonamortizing_features\"            \n[39] \"property_value\"                          \n[40] \"construction_method\"                     \n[41] \"occupancy_type\"                          \n[42] \"manufactured_home_secured_property_type\" \n[43] \"manufactured_home_land_property_interest\"\n[44] \"total_units\"                             \n[45] \"multifamily_affordable_units\"            \n[46] \"income\"                                  \n[47] \"debt_to_income_ratio\"                    \n[48] \"applicant_credit_score_type\"             \n[49] \"co-applicant_credit_score_type\"          \n[50] \"applicant_ethnicity-1\"                   \n[51] \"applicant_ethnicity-2\"                   \n[52] \"applicant_ethnicity-3\"                   \n[53] \"applicant_ethnicity-4\"                   \n[54] \"applicant_ethnicity-5\"                   \n[55] \"co-applicant_ethnicity-1\"                \n[56] \"co-applicant_ethnicity-2\"                \n[57] \"co-applicant_ethnicity-3\"                \n[58] \"co-applicant_ethnicity-4\"                \n[59] \"co-applicant_ethnicity-5\"                \n[60] \"applicant_ethnicity_observed\"            \n[61] \"co-applicant_ethnicity_observed\"         \n[62] \"applicant_race-1\"                        \n[63] \"applicant_race-2\"                        \n[64] \"applicant_race-3\"                        \n[65] \"applicant_race-4\"                        \n[66] \"applicant_race-5\"                        \n[67] \"co-applicant_race-1\"                     \n[68] \"co-applicant_race-2\"                     \n[69] \"co-applicant_race-3\"                     \n[70] \"co-applicant_race-4\"                     \n[71] \"co-applicant_race-5\"                     \n[72] \"applicant_race_observed\"                 \n[73] \"co-applicant_race_observed\"              \n[74] \"applicant_sex\"                           \n[75] \"co-applicant_sex\"                        \n[76] \"applicant_sex_observed\"                  \n[77] \"co-applicant_sex_observed\"               \n[78] \"applicant_age\"                           \n[79] \"co-applicant_age\"                        \n[80] \"applicant_age_above_62\"                  \n[81] \"co-applicant_age_above_62\"               \n[82] \"submission_of_application\"               \n[83] \"initially_payable_to_institution\"        \n[84] \"aus-1\"                                   \n[85] \"aus-2\"                                   \n[86] \"aus-3\"                                   \n[87] \"aus-4\"                                   \n[88] \"aus-5\"                                   \n[89] \"denial_reason-1\"                         \n[90] \"denial_reason-2\"                         \n[91] \"denial_reason-3\"                         \n[92] \"denial_reason-4\"                         \n[93] \"tract_population\"                        \n[94] \"tract_minority_population_percent\"       \n[95] \"ffiec_msa_md_median_family_income\"       \n[96] \"tract_to_msa_income_percentage\"          \n[97] \"tract_owner_occupied_units\"              \n[98] \"tract_one_to_four_family_homes\"          \n[99] \"tract_median_age_of_housing_units\"       \n\n\n\n\nS1901: Income in the Past 12 Months"
  }
]