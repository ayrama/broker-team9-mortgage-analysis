---
title: "Exploring Income and Mortgage Patterns in New York"
author: "Broker T's (Team 9)"
editor: visual
format:
  html:
    code-fold: true
    toc: true         
    toc-depth: 3 
execute: 
  cache: true
  cache-rebuild: false
  warning: false
  message: false
---
```{r}
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(DT)) install.packages("DT")
if (!require(sf)) install.packages("sf")
if (!require(sf)) install.packages("rvest")
if (!require(sf)) install.packages("httr")
if (!require(sf)) install.packages("data.table")

library(tidyverse)
library(DT)
library(sf)
library(utils)
library(rvest)
library(httr)
library(data.table)

```


::: {.callout .details}
<details>
<summary><h3>This section will be removed later</h3></summary>
### Overarching Question
How does the county you live in and the income you make affect mortgage rates, particularly throughout the three stages of the COVID-19 pandemic (2018-2023)?

### Specific Questions
1. Is there a county with more of a specific loan type than others? What could explain this?
2. What loan types were most popular pre, during, and post-pandemic?
3. Based on race and sex, who took out the most and least loans? Were specific loans dominant?
4. Is there a skew in the total number of loans given out depending on the county or geographic area?
5. Do interest rates vary significantly by county, and how are they influenced by sex or race?

### Data Sources
1. **New York shapefile** 
   Sourse: [US Census Bureau](https://www2.census.gov/geo/tiger/TIGER2024/CD/)

2. **NYC Annualized Sales (2003-2023)**  
   Source: [NYC Department of Finance](https://www.nyc.gov/site/finance/property/property-annualized-sales-update.page#)  
   Description: Provides property sales data for NYC.

3. **Record Mortgages Originated NY (2016-2021)**  
   Source: [NY State Department of Financial Services](https://www.dfs.ny.gov/apps_and_licensing/mortgage_companies/rrpm_originated_nys)  
   Description: Contains records of mortgages originated in New York State.

4. **HMDA US Mortgage Data (5 Years)**  
   Source: [Consumer Financial Protection Bureau](https://www.consumerfinance.gov/data-research/hmda/)  
   Description: Loan-level mortgage data, including interest rates, loan terms, and loan types.

5. **S1901: Income in the Past 12 Months**  
   Source: [US Census Bureau](https://data.census.gov/profile/New_York?g=040XX00US36)  
   Description: Annual income data by household type and income brackets.

6. **S2401: Occupation by Sex for the Civilian Employed Population 16 Years and Over**  
   Source: [US Census Bureau](https://data.census.gov/profile/New_York?g=040XX00US36)  
   Description: Employment statistics by occupation and demographics.

 
   
### Project Goals
- Examine the relationship between income, geographic location, and mortgage trends.
- Analyze demographic factors (race, sex) influencing mortgage patterns.
- Study the impact of the COVID-19 pandemic on mortgage rates and types.

### Team Members
- **Maria Jerez**
- **Lauren Cardieri**
- **Ayrat Aymetov**

### Folder Structure
- `/data`: Contains raw and cleaned datasets.
- `/scripts`: Includes code for data analysis and visualization.
- `/docs`: Documentation related to the project.
</details>
:::

## Data downloading

### New York shapefile

#### Downloading and opening New York shapefile
```{r}
# Define the URL of the ZIP file and the path for the local file
zip_url <- "https://www.example.com/tl_2024_36_cd119.zip" # Replace with actual URL
zip_file <- "data/tl_2024_36_cd119.zip"
extract_dir <- "data/tl_2024_36_cd119"

# Check if the ZIP file already exists
if (!file.exists(zip_file)) {
  message("Downloading ZIP file...")
  download.file(zip_url, zip_file, mode = "wb")
}

# Check if the extracted folder exists; if not, unzip the file
if (!dir.exists(extract_dir)) {
  message("Unzipping the file...")
  unzip(zipfile = zip_file, exdir = extract_dir)
} 

# Load the shapefile (adjust path as needed)
shapefile_path <- file.path(extract_dir, "tl_2024_36_cd119.shp")
shapefile <- st_read(shapefile_path, quiet = TRUE)

# Plot the map
plot(st_geometry(shapefile))
```

```{r}
# Define file paths
zip_file <- "data/nyc_borough_boundaries.zip"
unzip_dir <- "data/nyc_borough_boundaries"

# Download the NYC borough boundaries shapefile if not already downloaded
if (!file.exists(zip_file)) {
  download.file("https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile", 
                destfile = zip_file, mode = "wb")
}

# Unzip the file
unzip(zip_file, exdir = unzip_dir)

# Find the .shp file in the unzipped directory
shp_file <- list.files(unzip_dir, pattern = "\\.shp$", full.names = TRUE)

# Load the shapefile using sf
nyc_sf <- st_read(shp_file, quiet = TRUE)

# Plot the shapefile using ggplot2
ggplot(nyc_sf) + 
  geom_sf(aes(fill = shape_area)) + 
  labs(title = "NYC Borough Boundaries", fill = "Area") +
  theme_minimal()
```


### NYC Annualized Sales (2003-2023)
```{r}
# Create the target directory if it does not exist
dir.create("data/NYC_Annualized_Sales", recursive = TRUE, showWarnings = FALSE)

# Define the base URL
base_url <- "https://www.nyc.gov/assets/finance/downloads/pdf/rolling_sales/neighborhood_sales/"

# Define the list of file names and relative paths (same strings used for both)
files <- c(
  "2023/2023_manhattan.xlsx",
  "2023/2023_bronx.xlsx",
  "2023/2023_brooklyn.xlsx",
  "2023/2023_queens.xlsx",
  "2023/2023_statenisland.xlsx",
  "2023/2023_citywide_sale.xlsx",
  "2022/2022_citywide_sale.xlsx",
  "2021_citywide_sale.xlsx",
  "2020_citywide_sale.xlsx",
  "2019_citywide_sale.xlsx",
  "2018_citywide_sale.xlsx"
)

# Use purrr::walk for mapping
walk(files, ~ {
  # Destination file name (extracts the last part of the file path)
  dest_file <- file.path("data/NYC_Annualized_Sales", basename(.x))
  
  # Check if file exists
  if (!file.exists(dest_file)) {
    tryCatch({
      # Concatenate base URL with the relative path
      download.file(paste0(base_url, .x), destfile = dest_file, mode = "wb")
      message("Downloaded: ", dest_file)
    }, error = function(e) {
      message("Failed to download: ", dest_file, " - ", e$message)
    })
  } else {
    message("File already exists: ", dest_file)
  }
})

```

### Record Mortgages Originated NY (2016-2021)
```{r}
# URL of the webpage
url <- "https://www.dfs.ny.gov/apps_and_licensing/mortgage_companies/rrpm_originated_nys"

# Define the output file path
output_file <- "data/mortgage_table.csv"

# Check if the file already exists
if (file.exists(output_file)) {
  # Load the existing CSV file into table_df
  table_df <- read.csv(output_file)
} else {
  # Read the webpage content
  webpage <- read_html(url)
  
  # Extract the table (assumes the table is the first one on the page)
  table <- webpage %>%
    html_node("table") %>%  # Select the table element
    html_table()
  
  # Convert to a data frame
  table_df <- as.data.frame(table)
  
  # Save the table as a CSV file
  write.csv(table_df, output_file, row.names = FALSE)
}

# Use table_df for further processing or display
table_df

```

### HMDA US Mortgage Data (2018-2023)

```{r}
# Base URL
base_url <- "https://ffiec.cfpb.gov/v2/data-browser-api/view/csv"

# Define years
years <- 2018:2023

# Create the output folder
dir.create("data/HMDA_NYC_Mortgage_2018_2023", recursive = TRUE, showWarnings = FALSE)

# Loop through years to download state-level data
for (year in years) {
  # Construct the API URL with states only
  api_url <- paste0(base_url, "?years=", year, "&states=36")
  
  # Output file path
  output_file <- paste0("data/HMDA_NYC_Mortgage_2018_2023/mortgage_data_", year, "_state.csv")
  
  # Check if the file already exists
  if (!file.exists(output_file)) {
    # If the file doesn't exist, download it
    tryCatch({
      response <- GET(api_url)
      
      # Check if the request is successful
      if (status_code(response) == 200) {
        writeBin(content(response, "raw"), output_file)
        message("Downloaded: ", output_file)
      } else {
        message("Failed for year ", year, " - Status Code: ", status_code(response))
        message(content(response, as = "text"))
      }
    }, error = function(e) {
      message("Error downloading year ", year, " - ", e$message)
    })
  }
}

```


```{r}
# Define the file path
file_path <- "data/HMDA_NYC_Mortgage_2018_2023/mortgage_data_2018_state.csv"

# Read the CSV file
mortgage_data <- fread(file_path)

# Get a summary of the data
colnames(mortgage_data)
```

### S1901: Income in the Past 12 Months
```{r eval = FALSE}
# API
# 
# library(httr)
# library(jsonlite)
# library(dplyr)
# 
# # Define the base URL for the API
# base_url <- "https://api.census.gov/data/2023/acs/acs1/subject"
# 
# # Define query parameters
# query_params <- list(
#   get = "group(S1901)",
#   ucgid = "pseudo(0400000US36$0500000)" # Updated ucgid parameter
# )
# 
# # Define the output folder and file
# output_folder <- "data/s1901"
# dir.create(output_folder, recursive = TRUE, showWarnings = FALSE)
# output_file <- file.path(output_folder, "s1901_data.csv")
# 
# # Make the API request
# tryCatch({
#   response <- GET(base_url, query = query_params)
# 
#   # Check if the request was successful
#   if (status_code(response) == 200) {
#     # Parse the JSON content
#     raw_content <- content(response, as = "text")
#     data <- fromJSON(raw_content)
#     
#     # Extract column names and rows
#     col_names <- data[[1]]   # First row contains column names
#     data <- as.data.frame(data[-1, ], stringsAsFactors = FALSE)  # Remove the first row for data
#     colnames(data) <- col_names  # Assign column names to the data frame
# 
#     # Save the data as a CSV file
#     write.csv(data, output_file, row.names = FALSE)
#     message("Downloaded data saved to: ", output_file)
#   } else {
#     message("Failed to download data - Status Code: ", status_code(response))
#     message("Response: ", content(response, as = "text"))
#   }
# }, error = function(e) {
#   message("Error during API request: ", e$message)
# })

```

Downloading the s1901 tables for 2018-2023 range
```{r}
# downloading zip files s1901 table for 2018-2023 range.
# 2018-2022 tables are 5-years estimates; includes all counties in NY state
# 2022 is 1-year estimate; does not include small states.

# Define the URL and file paths
url <- "https://data.census.gov/api/access/table/download?download_id=5bb0f710ebc6fbb327e67624a3f89396e7c82f76c6a3aeb6d097db96d46b684c"
zip_file <- "data/s1901/s1901_data.zip"
extract_dir <- "data/s1901"

# Create the destination folder if it doesn't exist
dir.create("data/s1901", recursive = TRUE, showWarnings = FALSE)

# Download the ZIP file
if (!file.exists(zip_file)) {
  tryCatch({
    download.file(url, destfile = zip_file, mode = "wb")
  }, error = function(e) {
    stop("Failed to download the ZIP file: ", e$message)
  })
}

# Force unzip the file to ensure proper extraction
tryCatch({
  unzip(zipfile = zip_file, exdir = extract_dir, overwrite = TRUE)
}, error = function(e) {
  stop("Failed to unzip the file: ", e$message)
})

```


S1901 tables merging and modification
```{r}
# Load necessary libraries
library(dplyr)

# Define the folder containing the CSV files
folder_path <- "data/s1901"

# Define the file names and years
years <- 2018:2023
file_names <- c(
  paste0("ACSST5Y", years[1:5], ".S1901-Data.csv"), # For 5-Year Estimates (2018-2022)
  "ACSST1Y2023.S1901-Data.csv" # For 1-Year Estimate (2023)
)

# Initialize an empty list to store the data frames
tables_list <- list()

# Loop through the file names and read each table
for (i in seq_along(file_names)) {
  file_path <- file.path(folder_path, file_names[i]) # Construct full file path
  if (file.exists(file_path)) {
    # Read the CSV file without treating the first row as the header
    temp_table <- read.csv(file_path, stringsAsFactors = FALSE, header = FALSE)
    
    # For the first table, remove only the first header row
    if (i == 1) {
      temp_table <- temp_table[-1, ] # Remove the first row
    } else {
      # For other tables, remove the first two header rows
      temp_table <- temp_table[-c(1, 2), ] # Remove the first two rows
    }
    
    # Assign proper column names from the first table (header row from file 1)
    if (i == 1) {
      column_names <- temp_table[1, ] # Capture the first row as column names
      temp_table <- temp_table[-1, ]  # Remove the row used for column names
    }
    colnames(temp_table) <- column_names # Apply column names to all tables
    
    # Add a new column for the year
    temp_table <- temp_table %>% mutate(Year = years[i])
    
    # Append the cleaned table to the list
    tables_list[[i]] <- temp_table
  } else {
    stop("File not found: ", file_path)
  }
}

# Combine all tables into one
combined_table <- bind_rows(tables_list)

# Move "Year" column to the second position
combined_table <- combined_table %>%
  relocate(Year, .after = Geography)

# Remove all columns with the word "Margin"
combined_table <- combined_table %>%
  select(-contains("Margin"))

# Rename columns with multiple modifications
names(combined_table) <- names(combined_table) %>%
  gsub("Estimate!!", "", .) %>%                # Remove "Estimate!!"
  gsub("Total!!", "", .) %>%                   # Remove "Total!!"
  gsub("!!", "_", .) %>%                       # Replace "!!" with "_"
  gsub("Less than ", "<", .) %>%               # Replace "Less than " with "<"
  gsub(" to ", "-", .) %>%                     # Replace " to " with "-"
  gsub("\\$10,000", "$10k", .) %>%             # Replace "$10,000" with "$10k"
  gsub("\\$14,999|\\$15,000", "$15k", .) %>%   # Replace "$14,999" and "$15,000" with "$15k"
  gsub("\\$24,999|\\$25,000", "$25k", .) %>%   # Replace "$24,999" and "$25,000" with "$25k"
  gsub("\\$34,999|\\$35,000", "$35k", .) %>%   # Replace "$34,999" and "$35,000" with "$35k"
  gsub("\\$49,999|\\$50,000", "$50k", .) %>%   # Replace "$49,999" and "$50,000" with "$50k"
  gsub("\\$74,999|\\$75,000", "$75k", .) %>%   # Replace "$74,999" and "$75,000" with "$75k"
  gsub("\\$99,999|\\$100,000", "$100k", .) %>% # Replace "$99,999" and "$100,000" with "$100k"
  gsub("\\$149,999|\\$150,000", "$150k", .) %>%# Replace "$149,999" and "$150,000" with "$150k"
  gsub("\\$199,999|\\$200,000", "$200k", .) %>%# Replace "$199,999" and "$200,000" with "$200k"
  gsub(" in the past 12 months", "", .) %>%    # Remove " in the past 12 months"
  gsub(" ", "_", .) %>%                    # Replace all white spaces with "_"
  gsub("\\$200k_or_more", ">$200k", .)

# Replace columns with "(X)" or NA values
combined_table <- combined_table %>%
  select(where(~ !all(. == "(X)" | is.na(.))))

# Generate the DT table with horizontal scroll
datatable(combined_table, 
          options = list(pageLength = 10, scrollX = TRUE),
          caption = 'Cleaned Combined Table')


# # Optional: Save the combined table to a CSV file
write.csv(combined_table, "data/s1901/combined_s1901_cleaned.csv", row.names = FALSE)

```




### S2401: Occupation by Sex for the Civilian Employed Population 16 Years and Over**  
